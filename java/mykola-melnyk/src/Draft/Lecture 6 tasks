Coding tasks

Class City has the following properties: string name, string country, int population. Create methods (all of them need to use Stream API)
that accepts a list of cities and a value of a population, and returns true if all cities in the list have the population bigger than a passed value
that accepts a list of cities and a country name and returns a city with the biggest population for that country
that accepts a list of cities and returns a map, where the key is the city name and and a value - is a corresponding city object (note: the list might contain duplicates)
Create a method that accepts a list of orders and returns a map of an average price of all store orders per each country. Use Stream API to do this. The order has such properties: string id, enum type (WEBSITE, STORE), float price (yeah, I know, but let’s simplify the code :)), string country. How would you change your code if a list contains duplicate items with the same id?
Input: order1(“1”, “store”, 1.23, “Ukraine”), order2(“2”, “store”, 4.56, “Ukraine”), order3(“3”, “store”, 1.23, “USA”), order4(“4”, “website”, 1.23, “USA”)
Output: “USA” -> 1.23, “Ukraine” -> 2.89
Create a class UserRepository with a method String findUserEmail(String id). The class constructor needs to accept an instance of an interface UserCache (contains a single method Optional<User> findUser(String id)) and an instance of an interface UserTable (contains a single method with the same signature as the cache). The method findUserEmail needs to use a cache instance to retrieve a user from it, if it’s missing in cache - retrieve a user from the table, if it’s missing there as well - throw a custom checked exception UserMissingException with details regarding the exception and the id of a missing record. If a user was found either in cache or in a table - the method needs to return the user's email. User has the following properties: string id, string email. Create another class UserService that has an instance of UserRepository and a method String findUserEmail(String id). UserService needs to call the method of UserRepository and properly handle the thrown exception (it’s enough to print information to the output).
